// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using hospitalfinal.Models;

#nullable disable

namespace hospitalfinal.Migrations
{
    [DbContext(typeof(HospitalContext))]
    partial class HospitalContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "9.0.0");

            modelBuilder.Entity("hospitalfinal.Models.Branslar", b =>
                {
                    b.Property<int>("BransId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("BransAd")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("BransId");

                    b.ToTable("Branslar", (string)null);
                });

            modelBuilder.Entity("hospitalfinal.Models.Doktorlar", b =>
                {
                    b.Property<int>("DoktorId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("BransId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Deneyim")
                        .HasColumnType("INTEGER");

                    b.Property<string>("DoktorAd")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("DoktorSoyad")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("DoktorTc")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("DoktorTC");

                    b.Property<string>("Email")
                        .HasColumnType("TEXT");

                    b.Property<string>("Sifre")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Telefon")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Uzmanlik")
                        .HasColumnType("TEXT");

                    b.HasKey("DoktorId");

                    b.HasIndex("BransId");

                    b.HasIndex(new[] { "DoktorTc" }, "IX_Doktorlar_DoktorTC")
                        .IsUnique();

                    b.HasIndex(new[] { "Email" }, "IX_Doktorlar_Email")
                        .IsUnique();

                    b.ToTable("Doktorlar", (string)null);
                });

            modelBuilder.Entity("hospitalfinal.Models.Hastalar", b =>
                {
                    b.Property<int>("HastaId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Adres")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("DogumTarihi")
                        .HasColumnType("DATE");

                    b.Property<string>("Email")
                        .HasColumnType("TEXT");

                    b.Property<string>("HastaAd")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("HastaSoyad")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Sifre")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Tc")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Telefon")
                        .HasColumnType("TEXT");

                    b.HasKey("HastaId");

                    b.HasIndex(new[] { "Email" }, "IX_Hastalar_Email")
                        .IsUnique();

                    b.HasIndex(new[] { "Tc" }, "IX_Hastalar_Tc")
                        .IsUnique();

                    b.HasIndex(new[] { "Telefon" }, "IX_Hastalar_Telefon")
                        .IsUnique();

                    b.ToTable("Hastalar", (string)null);
                });

            modelBuilder.Entity("hospitalfinal.Models.RandevuMusait", b =>
                {
                    b.Property<int>("RandevuMusaitId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("DoktorId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Durum")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasDefaultValue(1);

                    b.Property<TimeSpan>("MusaitSaat")
                        .HasColumnType("TIME");

                    b.Property<DateTime>("MusaitTarih")
                        .HasColumnType("DATE");

                    b.HasKey("RandevuMusaitId");

                    b.HasIndex("DoktorId");

                    b.ToTable("RandevuMusait", (string)null);
                });

            modelBuilder.Entity("hospitalfinal.Models.Randevular", b =>
                {
                    b.Property<int>("RandevuId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("DoktorId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("HastaId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("OnayDurumu")
                        .HasColumnType("INTEGER");

                    b.Property<TimeSpan>("RandevuSaati")
                        .HasColumnType("TIME");

                    b.Property<DateTime>("RandevuTarihi")
                        .HasColumnType("DATE");

                    b.HasKey("RandevuId");

                    b.HasIndex("DoktorId");

                    b.HasIndex("HastaId");

                    b.ToTable("Randevular", (string)null);
                });

            modelBuilder.Entity("hospitalfinal.Models.Sekreterler", b =>
                {
                    b.Property<int>("SekreterId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Email")
                        .HasColumnType("TEXT");

                    b.Property<string>("SekreterAd")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("SekreterSoyad")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("SekreterTc")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("SekreterTC");

                    b.Property<string>("Sifre")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Telefon")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("SekreterId");

                    b.HasIndex(new[] { "Email" }, "IX_Sekreterler_Email")
                        .IsUnique();

                    b.HasIndex(new[] { "SekreterTc" }, "IX_Sekreterler_SekreterTC")
                        .IsUnique();

                    b.ToTable("Sekreterler", (string)null);
                });

            modelBuilder.Entity("hospitalfinal.Models.Doktorlar", b =>
                {
                    b.HasOne("hospitalfinal.Models.Branslar", "Brans")
                        .WithMany("Doktorlars")
                        .HasForeignKey("BransId")
                        .IsRequired();

                    b.Navigation("Brans");
                });

            modelBuilder.Entity("hospitalfinal.Models.RandevuMusait", b =>
                {
                    b.HasOne("hospitalfinal.Models.Doktorlar", "Doktor")
                        .WithMany("RandevuMusaits")
                        .HasForeignKey("DoktorId")
                        .IsRequired();

                    b.Navigation("Doktor");
                });

            modelBuilder.Entity("hospitalfinal.Models.Randevular", b =>
                {
                    b.HasOne("hospitalfinal.Models.Doktorlar", "Doktor")
                        .WithMany("Randevulars")
                        .HasForeignKey("DoktorId")
                        .IsRequired();

                    b.HasOne("hospitalfinal.Models.Hastalar", "Hasta")
                        .WithMany("Randevulars")
                        .HasForeignKey("HastaId")
                        .IsRequired();

                    b.Navigation("Doktor");

                    b.Navigation("Hasta");
                });

            modelBuilder.Entity("hospitalfinal.Models.Branslar", b =>
                {
                    b.Navigation("Doktorlars");
                });

            modelBuilder.Entity("hospitalfinal.Models.Doktorlar", b =>
                {
                    b.Navigation("RandevuMusaits");

                    b.Navigation("Randevulars");
                });

            modelBuilder.Entity("hospitalfinal.Models.Hastalar", b =>
                {
                    b.Navigation("Randevulars");
                });
#pragma warning restore 612, 618
        }
    }
}
